generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id(map: "Account_pkey") @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@map("account")
}

model Session {
  id           String   @id(map: "Session_pkey") @default(cuid())
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_userId_fkey")

  @@map("session")
}

model User {
  id            String       @id(map: "User_pkey") @default(cuid())
  name          String?
  email         String?      @unique(map: "User_email_key")
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  itineraries   Itinerary[]
  sessions      Session[]
  userFlights   UserFlight[]

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique(map: "VerificationToken_token_key")
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
  @@map("verification_token")
}

model UserFlight {
  userId        String
  date          String?
  flightId      String
  isCanceled    Boolean? @map("is_canceled")
  voucherAmount Int?     @map("voucher_amount")
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([userId, flightId])
  @@map("user_flight")
}

model Itinerary {
  itineraryId   Int      @id(map: "itineraries_pkey") @default(autoincrement())
  userId        String?
  name          String?  @db.VarChar(50)
  itineraryData Json     @map("itinerary_data")
  dateCreated   DateTime @default(now()) @map("date_created") @db.Timestamp(6)
  user          User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("itinerary")
}
